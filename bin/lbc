#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require 'em-http'
require 'yaml'
require 'const'
require 'yajl'
require 'error'
require 'command'
require 'protocol'
require 'request'
require 'optparse'
require "awesome_print"
require "fileutils"
require "colorize"
require "cowsay"

#Parse options.
options = {}
token = ''

api_server = LightBoxClient::DEFAULT_LIGHTBOX_SERVER
work_space = "#{LightBoxClient::WORKSPACE}"

if File.exists?(work_space)
  token_file = "#{work_space}/token"
  api_server_file = "#{work_space}/server"
  token = open(token_file).read.chomp if File.exists?(token_file)
  api_server = open(api_server_file).read.chomp if File.exists?(api_server_file)
  options.store(:token, token)
  options.store(:lightbox, api_server)
else
  FileUtils.mkdir_p("#{work_space}")
  ap "Created lightbox workspace at #{work_space}"
end

opts_parser = OptionParser.new do |opts|
  opts.banner = "Usage: ./lbc #{LightBoxClient::SUPPORTED_CMDS} [options] "
  opts.on("-a Light-API", 
          "--api", "ligt-api server")  { |api| 
    options[:lightbox] = api.to_s 
    }
  opts.on("-l Location", 
          "--location", "location")  { |loc| 
    options[:location] = loc.to_s 
   }
  opts.on("-b Box-ID", 
          "--boxid", "boxid")  { |boxid| 
    options[:boxid] = boxid.to_s 
    }
  opts.on("-i Image", 
          "--image", "image")  { |image| 
    options[:image] = image.to_s 
    }
  opts.on("-n Name", 
          "--name", "name")  { |name| 
    options[:name] = name.to_s 
    }
  opts.on("-k Batch", 
          "--batch", "batch")  { |batch| 
    options[:batch] = Integer(batch) 
    }
  opts.on("-q Batchid", 
          "--batchid", "batchid")  { |batchid| 
    options[:batchid] = batchid.to_s 
    }
  opts.on("-e Email", 
          "--email", "Email")  { |email| 
    options[:email] = email.to_s 
    }
  opts.on("-P Password", 
          "--password", "password")  { |password| 
    options[:password] = password.to_s 
    }
  opts.on("-m MEMORY", "--memory", "memory")  { |mem| 
    options[:limits] = {}
    options[:limits].store(:memory , Integer(mem))
    }
  opts.on("-p PORTS", 
          "--ports", "ports")   { |ports| 
    options[:ports] = ports.to_s 
    }
  opts.on("-h", "--help", "show help document")   { 
    ap opts
    ap LightBoxClient::CMDS_USAGE, :index => false
    system('cowsay "Welcome use lightbox."')
    exit 0
   }
end.parse!

if ARGV.size < 1
   system('cowsay "No command given, use ./lbc -h for help."') 
   exit
end

options.store(:command, ARGV[0]) 

EventMachine.run do
  attributes = LightBoxClient::Command.translate_attributes(options)
  command = LightBoxClient::Command.new(attributes)
  command.validate

  lightbox_request = LightBoxClient::Request.new(command)
  lightbox_request.start do |status, response|
    puts "[LightBoxClient] lightbox request completed with status #{status}!"
    puts "[LightBoxClient] lightbox response is #{response}!"
    EM.stop
  end
end
